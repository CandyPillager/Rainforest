From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mariell Hoversholm <proximyst@proximyst.com>
Date: Sun, 21 Jun 2020 01:06:24 +0200
Subject: [PATCH] Add Rainforest config

---
 .../java/co/aikar/timings/TimingsExport.java  |   1 +
 .../rainforest/RainforestCommand.java         |  89 +++++++++
 .../rainforest/RainforestConfig.java          | 188 ++++++++++++++++++
 .../rainforest/RainforestWorldConfig.java     |  68 +++++++
 .../net/minecraft/server/DedicatedServer.java |   1 +
 src/main/java/net/minecraft/server/World.java |   4 +
 .../org/bukkit/craftbukkit/CraftServer.java   |   9 +
 .../java/org/bukkit/craftbukkit/Main.java     |   8 +
 8 files changed, 368 insertions(+)
 create mode 100644 src/main/java/com/proximyst/rainforest/RainforestCommand.java
 create mode 100644 src/main/java/com/proximyst/rainforest/RainforestConfig.java
 create mode 100644 src/main/java/com/proximyst/rainforest/RainforestWorldConfig.java

diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index e33e889c291d37a821a4fbd40d9aac7bb079de0d..b183ddcce44b1f4b330e18f4f3bcc1725c307b40 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -230,6 +230,7 @@ public class TimingsExport extends Thread {
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
             pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null))
+            , pair("rainforest", mapAsJSON(Bukkit.spigot().getRainforestConfig(), null)) // Rainforest
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/com/proximyst/rainforest/RainforestCommand.java b/src/main/java/com/proximyst/rainforest/RainforestCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..9e26fa3bff387e362a6748266df8742cf5682af6
--- /dev/null
+++ b/src/main/java/com/proximyst/rainforest/RainforestCommand.java
@@ -0,0 +1,89 @@
+package com.proximyst.rainforest;
+
+import com.destroystokyo.paper.PaperCommand;
+import java.io.File;
+import java.util.Collections;
+import java.util.List;
+import java.util.Locale;
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.WorldServer;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+public class RainforestCommand extends Command {
+  public RainforestCommand(String name) {
+    super(name);
+    this.description = "Rainforest related commands";
+    this.usageMessage = "/rainforest [reload | version]";
+    this.setPermission("rainforest.command");
+  }
+
+  @Override
+  public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location)
+      throws IllegalArgumentException {
+    if (args.length <= 1) {
+      return PaperCommand.getListMatchingLast(args, "reload", "version");
+    }
+
+    switch (args[0].toLowerCase(Locale.ENGLISH)) {
+      default:
+        return Collections.emptyList();
+    }
+  }
+
+  @Override
+  public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+    if (!testPermission(sender)) {
+      return true;
+    }
+
+    if (args.length == 0) {
+      sender.sendMessage(new ComponentBuilder("Usage: ")
+          .color(ChatColor.RED)
+          .append(getUsage())
+          .create());
+      return false;
+    }
+
+    switch (args[0].toLowerCase(Locale.ENGLISH)) {
+      case "reload":
+        doReload(sender);
+        break;
+      case "ver":
+      case "version":
+        Command ver = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+        if (ver != null) {
+          ver.execute(sender, commandLabel, new String[0]);
+          break;
+        }
+        // else - fall through to default
+      default:
+        sender.sendMessage(new ComponentBuilder("Usage: ")
+            .color(ChatColor.RED)
+            .append(getUsage())
+            .create());
+        return false;
+    }
+
+    return true;
+  }
+
+  private void doReload(CommandSender sender) {
+    Command.broadcastCommandMessage(sender,
+        org.bukkit.ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+    Command.broadcastCommandMessage(sender,
+        org.bukkit.ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+    MinecraftServer console = MinecraftServer.getServer();
+    RainforestConfig.init((File) console.options.valueOf("rainforest-settings"));
+    for (WorldServer world : console.getWorlds()) {
+      world.rainforestConfig.init();
+    }
+    console.server.reloadCount++;
+
+    Command.broadcastCommandMessage(sender, org.bukkit.ChatColor.GREEN + "Rainforest config reload complete.");
+  }
+}
diff --git a/src/main/java/com/proximyst/rainforest/RainforestConfig.java b/src/main/java/com/proximyst/rainforest/RainforestConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..0d854bda9611b45d78815f9fe9cafb8901de210f
--- /dev/null
+++ b/src/main/java/com/proximyst/rainforest/RainforestConfig.java
@@ -0,0 +1,188 @@
+package com.proximyst.rainforest;
+
+import com.google.common.base.Throwables;
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+import java.util.regex.Pattern;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+// Based on PaperConfig
+public final class RainforestConfig {
+  private static File CONFIG_FILE;
+  private static final String HEADER = "This is the main configuration file for Rainforest.\n"
+      + "Make sure you only configure what you know what does.\n"
+      + "\n"
+      + "If you need help with the configuration or have any questions related to Rainforest,\n"
+      + "join us in our Discord.\n"
+      + "\n"
+      + "GitHub: https://github.com/Proximyst/Rainforest\n"
+      + "Discord: https://discord.gg/3kaGYqv";
+
+  public static YamlConfiguration config;
+  static int version;
+  static Map<String, Command> commands;
+  private static boolean verbose;
+  private static boolean fatalError;
+
+  public static void init(File configFile) {
+    CONFIG_FILE = configFile;
+    config = new YamlConfiguration();
+    try {
+      config.load(CONFIG_FILE);
+    } catch (IOException ex) {
+    } catch (InvalidConfigurationException ex) {
+      Bukkit.getLogger()
+          .log(Level.SEVERE, "Could not load rainforest config file, please correct your syntax errors", ex);
+      throw Throwables.propagate(ex);
+    }
+    config.options().header(HEADER);
+    config.options().copyDefaults(true);
+    verbose = getBoolean("verbose", false);
+
+    commands = new HashMap<String, Command>();
+    commands.put("rainforest", new RainforestCommand("rainforest"));
+
+    version = getInt("config-version", 1);
+    set("config-version", 1);
+    readConfig(RainforestConfig.class, null);
+  }
+
+  protected static void logError(String s) {
+    Bukkit.getLogger().severe(s);
+  }
+
+  protected static void fatal(String s) {
+    fatalError = true;
+    throw new RuntimeException("Fatal rainforest config error: " + s);
+  }
+
+  protected static void log(String s) {
+    if (verbose) {
+      Bukkit.getLogger().info(s);
+    }
+  }
+
+  public static void registerCommands() {
+    for (Map.Entry<String, Command> entry : commands.entrySet()) {
+      MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Paper", entry.getValue());
+    }
+  }
+
+  static void readConfig(Class<?> clazz, Object instance) {
+    for (Method method : clazz.getDeclaredMethods()) {
+      if (Modifier.isPrivate(method.getModifiers())) {
+        if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+          try {
+            method.setAccessible(true);
+            method.invoke(instance);
+          } catch (InvocationTargetException ex) {
+            throw Throwables.propagate(ex.getCause());
+          } catch (Exception ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+          }
+        }
+      }
+    }
+
+    try {
+      config.save(CONFIG_FILE);
+    } catch (IOException ex) {
+      Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+    }
+  }
+
+  private static final Pattern SPACE = Pattern.compile(" ");
+  private static final Pattern NOT_NUMERIC = Pattern.compile("[^-\\d.]");
+
+  public static int getSeconds(String str) {
+    str = SPACE.matcher(str).replaceAll("");
+    final char unit = str.charAt(str.length() - 1);
+    str = NOT_NUMERIC.matcher(str).replaceAll("");
+    double num;
+    try {
+      num = Double.parseDouble(str);
+    } catch (Exception e) {
+      num = 0D;
+    }
+    switch (unit) {
+      case 'd':
+        num *= (double) 60 * 60 * 24;
+        break;
+      case 'h':
+        num *= (double) 60 * 60;
+        break;
+      case 'm':
+        num *= (double) 60;
+        break;
+      default:
+      case 's':
+        break;
+    }
+    return (int) num;
+  }
+
+  protected static String timeSummary(int seconds) {
+    String time = "";
+
+    if (seconds > 60 * 60 * 24) {
+      time += TimeUnit.SECONDS.toDays(seconds) + "d";
+      seconds %= 60 * 60 * 24;
+    }
+
+    if (seconds > 60 * 60) {
+      time += TimeUnit.SECONDS.toHours(seconds) + "h";
+      seconds %= 60 * 60;
+    }
+
+    if (seconds > 0) {
+      time += TimeUnit.SECONDS.toMinutes(seconds) + "m";
+    }
+    return time;
+  }
+
+  private static void set(String path, Object val) {
+    config.set(path, val);
+  }
+
+  private static boolean getBoolean(String path, boolean def) {
+    config.addDefault(path, def);
+    return config.getBoolean(path, config.getBoolean(path));
+  }
+
+  private static double getDouble(String path, double def) {
+    config.addDefault(path, def);
+    return config.getDouble(path, config.getDouble(path));
+  }
+
+  private static float getFloat(String path, float def) {
+    // TODO: Figure out why getFloat() always returns the default value.
+    return (float) getDouble(path, (double) def);
+  }
+
+  private static int getInt(String path, int def) {
+    config.addDefault(path, def);
+    return config.getInt(path, config.getInt(path));
+  }
+
+  private static <T> List getList(String path, T def) {
+    config.addDefault(path, def);
+    return (List<T>) config.getList(path, config.getList(path));
+  }
+
+  private static String getString(String path, String def) {
+    config.addDefault(path, def);
+    return config.getString(path, config.getString(path));
+  }
+}
diff --git a/src/main/java/com/proximyst/rainforest/RainforestWorldConfig.java b/src/main/java/com/proximyst/rainforest/RainforestWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..22d920686418e86aec8be37f125123682af023a3
--- /dev/null
+++ b/src/main/java/com/proximyst/rainforest/RainforestWorldConfig.java
@@ -0,0 +1,68 @@
+package com.proximyst.rainforest;
+
+import static com.proximyst.rainforest.RainforestConfig.log;
+
+import com.destroystokyo.paper.PaperWorldConfig;
+import java.util.List;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+// Based on PaperWorldConfig
+public final class RainforestWorldConfig {
+  private final String worldName;
+  private final PaperWorldConfig paperConfig;
+  private final YamlConfiguration config;
+  private boolean verbose;
+
+  public RainforestWorldConfig(String worldName, PaperWorldConfig paperConfig) {
+    this.worldName = worldName;
+    this.paperConfig = paperConfig;
+    this.config = RainforestConfig.config;
+    init();
+  }
+
+  public void init() {
+    log("-------- World Settings For [" + worldName + "] --------");
+    RainforestConfig.readConfig(RainforestWorldConfig.class, this);
+  }
+
+  private void set(String path, Object val) {
+    config.set("world-settings.default." + path, val);
+    if (config.get("world-settings." + worldName + "." + path) != null) {
+      config.set("world-settings." + worldName + "." + path, val);
+    }
+  }
+
+  private boolean getBoolean(String path, boolean def) {
+    config.addDefault("world-settings.default." + path, def);
+    return config
+        .getBoolean("world-settings." + worldName + "." + path, config.getBoolean("world-settings.default." + path));
+  }
+
+  private double getDouble(String path, double def) {
+    config.addDefault("world-settings.default." + path, def);
+    return config
+        .getDouble("world-settings." + worldName + "." + path, config.getDouble("world-settings.default." + path));
+  }
+
+  private int getInt(String path, int def) {
+    config.addDefault("world-settings.default." + path, def);
+    return config.getInt("world-settings." + worldName + "." + path, config.getInt("world-settings.default." + path));
+  }
+
+  private float getFloat(String path, float def) {
+    // TODO: Figure out why getFloat() always returns the default value.
+    return (float) getDouble(path, (double) def);
+  }
+
+  private <T> List<T> getList(String path, List<T> def) {
+    config.addDefault("world-settings.default." + path, def);
+    return (List<T>) config
+        .getList("world-settings." + worldName + "." + path, config.getList("world-settings.default." + path));
+  }
+
+  private String getString(String path, String def) {
+    config.addDefault("world-settings.default." + path, def);
+    return config
+        .getString("world-settings." + worldName + "." + path, config.getString("world-settings.default." + path));
+  }
+}
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
index 1c878265be0f458ff264bc4a4011397e5b60b20e..650f77c0c531dbb88828fceecfb7968190f67566 100644
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -170,6 +170,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         com.destroystokyo.paper.PaperConfig.registerCommands();
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         // Paper end
+        com.proximyst.rainforest.RainforestConfig.init((java.io.File) options.valueOf("rainforest-settings")); // Rainforest
 
         this.setPVP(dedicatedserverproperties.pvp);
         this.setAllowFlight(dedicatedserverproperties.allowFlight);
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 724aec660a36eb516514ae5dbee5fee2ca248a5a..3c829a513e9804414776cb339f42c8f3df8433e2 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -9,6 +9,7 @@ import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.serialization.Codec;
+import com.proximyst.rainforest.RainforestWorldConfig;
 import java.io.IOException;
 import java.util.Collection;
 import java.util.Iterator;
@@ -94,6 +95,8 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     public final com.destroystokyo.paper.PaperWorldConfig paperConfig; // Paper
     public final ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
 
+    public final RainforestWorldConfig rainforestConfig; // Rainforest
+
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPosition lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -125,6 +128,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((WorldDataServer) worlddatamutable).getName()); // Spigot
         this.paperConfig = new com.destroystokyo.paper.PaperWorldConfig((((WorldDataServer)worlddatamutable).getName()), this.spigotConfig); // Paper
         this.chunkPacketBlockController = this.paperConfig.antiXray ? new ChunkPacketBlockControllerAntiXray(this, executor) : ChunkPacketBlockController.NO_OPERATION_INSTANCE; // Paper - Anti-Xray
+        this.rainforestConfig = new RainforestWorldConfig((((WorldDataServer)worlddatamutable).getName()), this.paperConfig); // Rainforest
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
         this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 3580520c9dca841461e575b08de66e2a0e4687a5..b2c3f509df859126e4a6918321d4de57cd08f952 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -854,6 +854,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
+        com.proximyst.rainforest.RainforestConfig.init((File) console.options.valueOf("rainforest-settings")); // Rainforest
         for (WorldServer world : console.getWorlds()) {
             world.worldDataServer.setDifficulty(config.difficulty);
             world.setSpawnFlags(config.spawnMonsters, config.spawnAnimals);
@@ -888,6 +889,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.paperConfig.init(); // Paper
+            world.rainforestConfig.init(); // Rainforest
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -2239,6 +2241,13 @@ public final class CraftServer implements Server {
             return com.destroystokyo.paper.PaperConfig.config;
         }
 
+        // Rainforest start
+        @Override
+        public YamlConfiguration getRainforestConfig() {
+            return com.proximyst.rainforest.RainforestConfig.config;
+        }
+        // Rainforest end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index b5847ea7d0e6145463349035e245daecf3bb7447..43c338668dd4d259b4158b165c8b61b29b48c02b 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -139,6 +139,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Paper end
 
+                // Rainforest start
+                acceptsAll(asList("rainforest", "rainforest-settings"), "File for rainforest settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("rainforest.yml"))
+                        .describedAs("Yml file");
+                // Rainforest end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
