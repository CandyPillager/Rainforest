From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: William Blake Galbreath <blake.galbreath@gmail.com>
Date: Sat, 31 Oct 2020 10:11:03 +0100
Subject: [PATCH] Climbing should not bypass cramming gamerule

---
 .../proximyst/rainforest/RainforestWorldConfig.java   |  5 +++++
 src/main/java/net/minecraft/server/Entity.java        |  6 ++++++
 .../java/net/minecraft/server/EntityArmorStand.java   |  2 +-
 src/main/java/net/minecraft/server/EntityBat.java     |  2 +-
 src/main/java/net/minecraft/server/EntityBoat.java    |  2 +-
 .../net/minecraft/server/EntityHorseAbstract.java     |  2 +-
 src/main/java/net/minecraft/server/EntityLiving.java  | 11 +++++++++--
 .../net/minecraft/server/EntityMinecartAbstract.java  |  2 +-
 src/main/java/net/minecraft/server/EntityParrot.java  |  4 ++--
 .../java/net/minecraft/server/IEntitySelector.java    |  8 +++++++-
 10 files changed, 34 insertions(+), 10 deletions(-)

diff --git a/src/main/java/com/proximyst/rainforest/RainforestWorldConfig.java b/src/main/java/com/proximyst/rainforest/RainforestWorldConfig.java
index b470a6f186e31eda5dabe1abfe03d5fcd8321ba7..384264e54d38b8b34e77973254392024ee11adf4 100644
--- a/src/main/java/com/proximyst/rainforest/RainforestWorldConfig.java
+++ b/src/main/java/com/proximyst/rainforest/RainforestWorldConfig.java
@@ -78,4 +78,9 @@ public final class RainforestWorldConfig {
       log("The Ender Dragon will be removed if she already exists without a portal.");
     }
   }
+
+  public boolean fixClimbingBypassingCrammingRule = false;
+  private void fixClimbingBypassingCrammingRule() {
+    fixClimbingBypassingCrammingRule = getBoolean("fix-climbing-bypassing-cramming-rule", fixClimbingBypassingCrammingRule);
+  }
 }
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 4ec409b9793641a8447d9811c6384495a0fca99c..61929650e85d19db85aa044f6ec5c527245206c6 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1483,6 +1483,12 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public boolean isCollidable() {
+        // Rainforest start
+        return isCollidable(false);
+    }
+
+    public boolean isCollidable(boolean ignoreClimbing) {
+        // Rainforest end
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index aff83945242c843d8cfd8dffc4c33298f38fb9f2..6bda56372b00d3caa9a2499b4a156ae495f6d8fb 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -320,7 +320,7 @@ public class EntityArmorStand extends EntityLiving {
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Rainforest
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityBat.java b/src/main/java/net/minecraft/server/EntityBat.java
index af67cf86839e3b8c028d47fd9b65513e0ab24e70..79ccfa997792a5e64bf7dc4d2180fa57c942a9a6 100644
--- a/src/main/java/net/minecraft/server/EntityBat.java
+++ b/src/main/java/net/minecraft/server/EntityBat.java
@@ -50,7 +50,7 @@ public class EntityBat extends EntityAmbient {
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Rainforest
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 5d14c235b4badfc49d5f3cd83c159c1775782ea6..e194065fd67cc2600d26b9d02c1687c9b536e831 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -106,7 +106,7 @@ public class EntityBoat extends Entity {
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Rainforest
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityHorseAbstract.java b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
index 191d9cb8279cabdb5441fb10a107eb119e0fe9d0..e28f0f0550cbc40232669b7f779d8c72c2fd375e 100644
--- a/src/main/java/net/minecraft/server/EntityHorseAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
@@ -165,7 +165,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Rainforest
         return !this.isVehicle();
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 76185f042dd773f267dc7574116cec7bd8a28ca8..481b779c4c441d42242ff308e33c0b23fd410fdd 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -2847,7 +2847,7 @@ public abstract class EntityLiving extends Entity {
             return;
         }
         // Paper - end don't run getEntities if we're not going to use its result
-        List<Entity> list = this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.a(this));
+        List<Entity> list = this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.pushable(this, world.rainforestConfig.fixClimbingBypassingCrammingRule)); // Rainforest
 
         if (!list.isEmpty()) {
             // Paper - move up
@@ -2987,7 +2987,14 @@ public abstract class EntityLiving extends Entity {
 
     @Override
     public boolean isCollidable() {
-        return this.isAlive() && !this.isSpectator() && !this.isClimbing() && this.collides; // CraftBukkit
+        // Rainforest start
+        return this.isCollidable(world.rainforestConfig.fixClimbingBypassingCrammingRule);
+    }
+
+    @Override
+    public boolean isCollidable(boolean ignoreClimbing) {
+        return this.isAlive() && !this.isSpectator() && (ignoreClimbing || !this.isClimbing()) && this.collides; // CraftBukkit
+        // Rainforest end
     }
 
     // CraftBukkit start - collidable API
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index 9bc21ef8a1f366f77ceb31b8bd01e6cc6b8a17a5..e1a5852bc1037c3a1fa7faaf0921fcbd4c6a922d 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -107,7 +107,7 @@ public abstract class EntityMinecartAbstract extends Entity {
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Rainforest
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityParrot.java b/src/main/java/net/minecraft/server/EntityParrot.java
index 34e08dda2e16cd4a6ecd8d8c6dc89f090ec2bc56..4de6eaabff7527081d3aeaebb44d3344f1c318b1 100644
--- a/src/main/java/net/minecraft/server/EntityParrot.java
+++ b/src/main/java/net/minecraft/server/EntityParrot.java
@@ -314,8 +314,8 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     }
 
     @Override
-    public boolean isCollidable() {
-        return super.isCollidable(); // CraftBukkit - collidable API
+    public boolean isCollidable(boolean ignoreClimbing) { // Rainforest
+        return super.isCollidable(ignoreClimbing); // CraftBukkit - collidable API // Rainforest
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/IEntitySelector.java b/src/main/java/net/minecraft/server/IEntitySelector.java
index a9b0c78d6dba8c6ff7d524e2828f0ee7832e059e..d9218d36b4c4747cfe0917b476173a5640e8c597 100644
--- a/src/main/java/net/minecraft/server/IEntitySelector.java
+++ b/src/main/java/net/minecraft/server/IEntitySelector.java
@@ -42,11 +42,17 @@ public final class IEntitySelector {
     }
 
     public static Predicate<Entity> a(Entity entity) {
+        // Rainforest start - ignoreClimbing param
+        return pushable(entity, false);
+    }
+
+    public static Predicate<Entity> pushable(Entity entity, boolean ignoreClimbing) {
+        // Rainforest end
         ScoreboardTeamBase scoreboardteambase = entity.getScoreboardTeam();
         ScoreboardTeamBase.EnumTeamPush scoreboardteambase_enumteampush = scoreboardteambase == null ? ScoreboardTeamBase.EnumTeamPush.ALWAYS : scoreboardteambase.getCollisionRule();
 
         return (Predicate) (scoreboardteambase_enumteampush == ScoreboardTeamBase.EnumTeamPush.NEVER ? Predicates.alwaysFalse() : IEntitySelector.g.and((entity1) -> {
-            if (!entity1.canCollideWith(entity) || !entity.canCollideWith(entity1)) { // CraftBukkit - collidable API
+            if (!entity.isCollidable(ignoreClimbing) || !entity1.isCollidable(ignoreClimbing) || !entity1.canCollideWith(entity) || !entity.canCollideWith(entity1)) { // CraftBukkit - collidable API // Rainforest - isCollidable(Z)Z
                 return false;
             } else if (entity.world.isClientSide && (!(entity1 instanceof EntityHuman) || !((EntityHuman) entity1).ey())) {
                 return false;
