From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: William Blake Galbreath <blake.galbreath@gmail.com>
Date: Sat, 31 Oct 2020 10:11:03 +0100
Subject: [PATCH] Climbing should not bypass cramming gamerule

---
 .../proximyst/rainforest/RainforestWorldConfig.java   |  5 +++++
 src/main/java/net/minecraft/server/Entity.java        |  6 ++++++
 .../java/net/minecraft/server/EntityArmorStand.java   |  2 +-
 src/main/java/net/minecraft/server/EntityBat.java     |  2 +-
 src/main/java/net/minecraft/server/EntityBoat.java    |  2 +-
 .../net/minecraft/server/EntityHorseAbstract.java     |  2 +-
 src/main/java/net/minecraft/server/EntityLiving.java  | 11 +++++++++--
 .../net/minecraft/server/EntityMinecartAbstract.java  |  2 +-
 src/main/java/net/minecraft/server/EntityParrot.java  |  4 ++--
 .../java/net/minecraft/server/IEntitySelector.java    |  8 +++++++-
 10 files changed, 34 insertions(+), 10 deletions(-)

diff --git a/src/main/java/com/proximyst/rainforest/RainforestWorldConfig.java b/src/main/java/com/proximyst/rainforest/RainforestWorldConfig.java
index ff5970377ad1d71ec4065938a62bd5a7261e1fbc..d15b21947df591697e71d3f20cbec5ec0c83541a 100644
--- a/src/main/java/com/proximyst/rainforest/RainforestWorldConfig.java
+++ b/src/main/java/com/proximyst/rainforest/RainforestWorldConfig.java
@@ -70,4 +70,9 @@ public final class RainforestWorldConfig {
   private void dupeOptions() {
     allowEnderDragonExpDuping = getBoolean("allow-dragon-exp-duping", allowEnderDragonExpDuping);
   }
+
+  public boolean fixClimbingBypassingCrammingRule = false;
+  private void fixClimbingBypassingCrammingRule() {
+    fixClimbingBypassingCrammingRule = getBoolean("fix-climbing-bypassing-cramming-rule", fixClimbingBypassingCrammingRule);
+  }
 }
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 0ae2c8be466a7ff7f33c652e2159a818c032f060..02d3fe4ea05b3f439b08c6140aaa3689d9fcd4d5 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1484,6 +1484,12 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public boolean isCollidable() {
+        // Rainforest start
+        return isCollidable(false);
+    }
+
+    public boolean isCollidable(boolean ignoreClimbing) {
+        // Rainforest end
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityArmorStand.java b/src/main/java/net/minecraft/server/EntityArmorStand.java
index 66597c6e1add4df2f093480f507f03788a3eb30b..dfb63c9b0f369c50206c912d4e6dc72ae209038a 100644
--- a/src/main/java/net/minecraft/server/EntityArmorStand.java
+++ b/src/main/java/net/minecraft/server/EntityArmorStand.java
@@ -320,7 +320,7 @@ public class EntityArmorStand extends EntityLiving {
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Rainforest
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityBat.java b/src/main/java/net/minecraft/server/EntityBat.java
index 38ce3563106b02bfefb54a637713f27262ff258f..d576a6ced8499a84f48af9f46ceb1b16dcb3ad88 100644
--- a/src/main/java/net/minecraft/server/EntityBat.java
+++ b/src/main/java/net/minecraft/server/EntityBat.java
@@ -50,7 +50,7 @@ public class EntityBat extends EntityAmbient {
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Rainforest
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityBoat.java b/src/main/java/net/minecraft/server/EntityBoat.java
index 45fea38933d57e52dea19317c65682d57114a077..4f0e597c7127fc0d54281a26da93767e75e43a37 100644
--- a/src/main/java/net/minecraft/server/EntityBoat.java
+++ b/src/main/java/net/minecraft/server/EntityBoat.java
@@ -106,7 +106,7 @@ public class EntityBoat extends Entity {
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Rainforest
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityHorseAbstract.java b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
index 8af1fe5d820f3bcb5e02dd2300e8e9cbd7e4e201..d34c8cad587b366da6ed706a3ba4f62eb5fb270b 100644
--- a/src/main/java/net/minecraft/server/EntityHorseAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
@@ -165,7 +165,7 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Rainforest
         return !this.isVehicle();
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index fe0334b505de64ae1d96c4f0b6e66313d2b40010..6f0fd966f5ec30060f2f79c0fb8d3141e7aef0cd 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -2847,7 +2847,7 @@ public abstract class EntityLiving extends Entity {
             return;
         }
         // Paper - end don't run getEntities if we're not going to use its result
-        List<Entity> list = this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.a(this));
+        List<Entity> list = this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.pushable(this, world.rainforestConfig.fixClimbingBypassingCrammingRule)); // Rainforest
 
         if (!list.isEmpty()) {
             // Paper - move up
@@ -2987,7 +2987,14 @@ public abstract class EntityLiving extends Entity {
 
     @Override
     public boolean isCollidable() {
-        return this.isAlive() && !this.isSpectator() && !this.isClimbing() && this.collides; // CraftBukkit
+        // Rainforest start
+        return this.isCollidable(world.rainforestConfig.fixClimbingBypassingCrammingRule);
+    }
+
+    @Override
+    public boolean isCollidable(boolean ignoreClimbing) {
+        return this.isAlive() && !this.isSpectator() && (ignoreClimbing || !this.isClimbing()) && this.collides; // CraftBukkit
+        // Rainforest end
     }
 
     // CraftBukkit start - collidable API
diff --git a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
index 9af2bb392881900d74803cccd093d96b08673a25..7a61b7d485b52ce69137e07f7672aec24e3b8c98 100644
--- a/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityMinecartAbstract.java
@@ -107,7 +107,7 @@ public abstract class EntityMinecartAbstract extends Entity {
     }
 
     @Override
-    public boolean isCollidable() {
+    public boolean isCollidable(boolean ignoreClimbing) { // Rainforest
         return true;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityParrot.java b/src/main/java/net/minecraft/server/EntityParrot.java
index 1c682a62b8fd871848ebe8ff0dc576da6bb28810..ae0315e2e8e16682da10bc48ff90418e2ca7e5c3 100644
--- a/src/main/java/net/minecraft/server/EntityParrot.java
+++ b/src/main/java/net/minecraft/server/EntityParrot.java
@@ -314,8 +314,8 @@ public class EntityParrot extends EntityPerchable implements EntityBird {
     }
 
     @Override
-    public boolean isCollidable() {
-        return super.isCollidable(); // CraftBukkit - collidable API
+    public boolean isCollidable(boolean ignoreClimbing) { // Rainforest
+        return super.isCollidable(ignoreClimbing); // CraftBukkit - collidable API // Rainforest
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/IEntitySelector.java b/src/main/java/net/minecraft/server/IEntitySelector.java
index 31eb6868c2de20a7aa7438dbabf7a5f790d75732..887a500acd0eb0c51eca0cc6bc9786064cfee3d7 100644
--- a/src/main/java/net/minecraft/server/IEntitySelector.java
+++ b/src/main/java/net/minecraft/server/IEntitySelector.java
@@ -42,11 +42,17 @@ public final class IEntitySelector {
     }
 
     public static Predicate<Entity> a(Entity entity) {
+        // Rainforest start - ignoreClimbing param
+        return pushable(entity, false);
+    }
+
+    public static Predicate<Entity> pushable(Entity entity, boolean ignoreClimbing) {
+        // Rainforest end
         ScoreboardTeamBase scoreboardteambase = entity.getScoreboardTeam();
         ScoreboardTeamBase.EnumTeamPush scoreboardteambase_enumteampush = scoreboardteambase == null ? ScoreboardTeamBase.EnumTeamPush.ALWAYS : scoreboardteambase.getCollisionRule();
 
         return (Predicate) (scoreboardteambase_enumteampush == ScoreboardTeamBase.EnumTeamPush.NEVER ? Predicates.alwaysFalse() : IEntitySelector.g.and((entity1) -> {
-            if (!entity1.canCollideWith(entity) || !entity.canCollideWith(entity1)) { // CraftBukkit - collidable API
+            if (!entity.isCollidable(ignoreClimbing) || !entity1.isCollidable(ignoreClimbing) || !entity1.canCollideWith(entity) || !entity.canCollideWith(entity1)) { // CraftBukkit - collidable API // Rainforest - isCollidable(Z)Z
                 return false;
             } else if (entity.world.isClientSide && (!(entity1 instanceof EntityHuman) || !((EntityHuman) entity1).ez())) {
                 return false;
